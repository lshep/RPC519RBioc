{
  "hash": "74c133793a65e6a0a1a48e8a9526a40e",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"Garrett Grolemund and Lori Kern\"\n---\n\n# Packages\n\nR is a powerful language for data science and programming, allowing beginners\nand experts alike to manipulate, analyze, and visualize data effectively. One\nof the most appealing features of R is its extensive library of packages, which\nare essential tools for expanding its capabilities and streamlining the coding\nprocess.\n\nAn R package is a collection of reusable functions, datasets, and compiled code\ncreated by other users and developers to extend the functionality of the base R\nlanguage. These packages cover a wide range of applications, such as data\nmanipulation, statistical analysis, machine learning, and data visualization.\nBy utilizing existing R packages, you can leverage the expertise of others and\nsave time by avoiding the need to create custom functions from scratch.\n\nUsing others' R packages is incredibly beneficial as it allows you to take\nadvantage of the collective knowledge of the R community. Developers often\ncreate packages to address specific challenges, optimize performance, or\nimplement popular algorithms or methodologies. By incorporating these packages\ninto your projects, you can enhance your productivity, reduce development time,\nand ensure that you are using well-tested and reliable code.\n\n## Installing R packages\n\nTo install an R package, you can use the `install.packages()` function in the R\nconsole or script. For example, to install the popular data manipulation\npackage \"dplyr,\" simply type install.packages(\"dplyr\"). This command will\ndownload the package from the Comprehensive R Archive Network (CRAN) and\ninstall it on your local machine. Keep in mind that you only need to install a\npackage once, unless you want to update it to a newer version.\n\nFor those who are going to be using R for bioinformatics or biological data\nscience, you will also want to install packages from Bioconductor, which is a\nrepository of R packages specifically designed for bioinformatics and\ncomputational biology. To install Bioconductor packages, you can use the\n`BiocManager::install()` function. \n\nTo use this recommended approach, you first need to install the\n`BiocManager` package, which is the package manager for Bioconductor. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('BiocManager')\n```\n:::\n\n\nThis is a one-time installation. After that, you can install any R, Bioconductor, rOpenSci, or even GitHub package using the `BiocManager::install()` function. For example, to install the `ggplot2` package, which is widely used for data visualization, you would run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBiocManager::install(\"ggplot2\")\n```\n:::\n\n\n## Installing vs loading (library) R packages\n\nAfter installing an R package, you will need to load it into your R session\nbefore using its functions. To load a package, use the `library()` function\nfollowed by the package name, such as `library(dplyr)`. Loading a package makes\nits functions and datasets available for use in your current R session. Note\nthat you need to load a package every time you start a new R session.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nNow, the functionality of the _ggplot2_ package is available in our R session.\n\n\n::: {.callout-tip}\n## Installing vs loading packages\n\nThe main thing to remember is that you only need to install a package once, but you need to load it with library each time you wish to use it in a new R session. R will unload all of its packages each time you close RStudio.\n\n![Installing vs loading R packages.](https://hbctraining.github.io/Intro-to-R-flipped/img/install_vs_library.jpeg){#fig-install-vs-library}\n\nAs in {@fig-install-vs-library}, screw in the lightbulb (eg., `BiocManager::install`) only once and then to use it, you need to turn on the switch each time you want to use it (`library`).\n\n:::\n\n## Finding R packages\n\nFinding useful R packages can be done in several ways. First, browsing CRAN\n(<https://cran.r-project.org/>) and Bioconductor (<https://bioconductor.org>) are an excellent starting points, as they host\nthousands of packages categorized by topic. Additionally, online forums like\nStack Overflow and R-bloggers can provide valuable recommendations based on\nuser experiences. Social media platforms such as Twitter, where developers and\ndata scientists often share new packages and updates, can also be a helpful\nresource. Finally, don't forget to ask your colleagues or fellow R users for\ntheir favorite packages, as they may have insights on which ones best suit your\nspecific needs.\n\n## Creating a package\n\nWhile it may seem overwhelming, creating a package can be fairly simple with the\nassistance of R packages that provide tips and templates. [devtools](https://cran.r-project.org/web/packages/devtools/index.html) and\n[biocthis](https://bioconductor.org/packages/biocthis/) are great starting points. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}