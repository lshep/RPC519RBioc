{
  "hash": "7f93629405d18ecb598628721020def9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Frames\"\nauthor: \"Sean Davis\"\n---\n\n\nWhile R has many different data types, the one that is central to much of the power\nand popularity of R is the `data.frame`. A data.frame looks a bit like an R matrix in\nthat it has two dimensions, rows and columns. However, data.frames are usually viewed\nas a set of columns representing variables and the rows representing the values of\nthose variables. Importantly, a data.frame may contain *different* data types in each \nof its columns; matrices **must** contain only one data type. This distinction is \nimportant to remember, as there are *specific* approaches to working with R data.frames\nthat may be different than those for working with matrices.\n\n\n## Learning goals\n\n* Understand how data.frames are different from matrices.\n* Know a few functions for examing the contents of a data.frame.\n* List approaches for subsetting data.frames.\n* Be able to load and save tabular data from and to disk.\n* Show how to create a data.frames from scratch.\n\n## Learning objectives\n\n* Load the yeast growth dataset into R using `read.csv`.\n* Examine the contents of the dataset.\n* Use subsetting to find genes that may be involved with nutrient metabolism and transport.\n* Summarize data measurements by categories.\n\n## Dataset\n\nThe data used here are borrowed directly from the [fantastic\nBioconnector tutorials](http://bioconnector.org/index.html) and are a\ncleaned up version of the data from [Brauer et al. Coordination of\nGrowth Rate, Cell Cycle, Stress Response, and Metabolic Activity in\nYeast (2008) Mol Biol Cell\n19:352-367](http://www.ncbi.nlm.nih.gov/pubmed/17959824). These data\nare from a gene expression microarray, and in this paper the authors\nexamine the relationship between growth rate and gene expression in\nyeast cultures limited by one of six different nutrients (glucose,\nleucine, ammonium, sulfate, phosphate, uracil). If you give yeast a\nrich media loaded with nutrients except restrict the supply of a\nsingle nutrient, you can control the growth rate to any rate you\nchoose. By starving yeast of specific nutrients you can find genes\nthat:\n\n1. Raise or lower their expression in response to growth\n   rate. Growth-rate dependent expression patterns can tell us a lot\n   about cell cycle control, and how the cell responds to stress. The\n   authors found that expression of >25% of all yeast genes is\n   linearly correlated with growth rate, independent of the limiting\n   nutrient. They also found that the subset of negatively\n   growth-correlated genes is enriched for peroxisomal functions, and\n   positively correlated genes mainly encode ribosomal functions.\n2. Respond differently when different nutrients are being limited. If\n   you see particular genes that respond very differently when a\n   nutrient is sharply restricted, these genes might be involved in\n   the transport or metabolism of that specific nutrient.\n\nThe dataset can be downloaded directly from:\n\n- [brauer2007_tidy.csv](https://raw.githubusercontent.com/bioconnector/workshops/master/data/brauer2007_tidy.csv)\n\nWe are going to read this dataset into R and then use it as a playground for learning about data.frames.\n\n## Reading in data\n\nR has many capabilities for reading in data. Many of the functions\nhave names that help us to understand what data format is to be\nexpected. In this case, the filename that we want to read ends in\n`.csv`, meaning comma-separated-values. The `read.csv()` function\nreads in `.csv` files.  As usual, it is worth reading\n`help('read.csv')` to get a better sense of the possible\nbells-and-whistles.\n\nThe `read.csv()` function can read directly from a URL, so we do not\nneed to download the file directly.  This dataset is relatively large\n(about 16MB), so this may take a bit depending on your network\nconnection speed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(width=60)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl = paste0(\n    'https://raw.githubusercontent.com',\n    '/bioconnector/workshops/master/data/brauer2007_tidy.csv'\n)\nydat <- read.csv(url)\n```\n:::\n\n\nOur variable, `ydat`, now \"contains\" the downloaded and read data. We can check to see what data type \nread.csv gave us:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n## Inspecting data.frames\n\nOur `ydat` variable is a data.frame. As I mentioned, the dataset is fairly large, so we will not be\nable to look at it all at once on the screen. However, R gives us many tools to inspect a data.frame.\n\n- Overviews of content\n  + `head()` to show first few rows\n  + `tail()` to show last few rows\n- Size\n  + `dim()` for dimensions (rows, columns)\n  + `nrow()`\n  + `ncol()`\n  + `object.size()` for power users interested in the memory used to store an object\n- Data and attribute summaries\n  + `colnames()` to get the names of the columns\n  + `rownames()` to get the \"names\" of the rows--may not be present\n  + `summary()` to get per-column summaries of the data in the data.frame.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  symbol systematic_name nutrient rate expression\n1   SFB2         YNL049C  Glucose 0.05      -0.24\n2   <NA>         YNL095C  Glucose 0.05       0.28\n3   QRI7         YDL104C  Glucose 0.05      -0.02\n4   CFT2         YLR115W  Glucose 0.05      -0.33\n5   SSO2         YMR183C  Glucose 0.05       0.05\n6   PSP2         YML017W  Glucose 0.05      -0.69\n                            bp\n1        ER to Golgi transport\n2   biological process unknown\n3 proteolysis and peptidolysis\n4      mRNA polyadenylylation*\n5              vesicle fusion*\n6   biological process unknown\n                             mf\n1    molecular function unknown\n2    molecular function unknown\n3 metalloendopeptidase activity\n4                   RNA binding\n5              t-SNARE activity\n6    molecular function unknown\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       symbol systematic_name nutrient rate expression\n198425   DOA1         YKL213C   Uracil  0.3       0.14\n198426   KRE1         YNL322C   Uracil  0.3       0.28\n198427   MTL1         YGR023W   Uracil  0.3       0.27\n198428   KRE9         YJL174W   Uracil  0.3       0.43\n198429   UTH1         YKR042W   Uracil  0.3       0.19\n198430   <NA>         YOL111C   Uracil  0.3       0.04\n                                               bp\n198425    ubiquitin-dependent protein catabolism*\n198426      cell wall organization and biogenesis\n198427      cell wall organization and biogenesis\n198428     cell wall organization and biogenesis*\n198429 mitochondrion organization and biogenesis*\n198430                 biological process unknown\n                                        mf\n198425          molecular function unknown\n198426 structural constituent of cell wall\n198427          molecular function unknown\n198428          molecular function unknown\n198429          molecular function unknown\n198430          molecular function unknown\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 198430      7\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 198430\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"symbol\"          \"systematic_name\" \"nutrient\"       \n[4] \"rate\"            \"expression\"      \"bp\"             \n[7] \"mf\"             \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    symbol          systematic_name      nutrient        \n Length:198430      Length:198430      Length:198430     \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n      rate          expression             bp           \n Min.   :0.0500   Min.   :-6.500000   Length:198430     \n 1st Qu.:0.1000   1st Qu.:-0.290000   Class :character  \n Median :0.2000   Median : 0.000000   Mode  :character  \n Mean   :0.1752   Mean   : 0.003367                     \n 3rd Qu.:0.2500   3rd Qu.: 0.290000                     \n Max.   :0.3000   Max.   : 6.640000                     \n      mf           \n Length:198430     \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n\nIn RStudio, there is an additional function, `View()` (note the capital \"V\") that opens the first\n1000 rows (default) in the RStudio window, akin to a spreadsheet view. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(ydat)\n```\n:::\n\n\n## Accessing variables (columns) and subsetting\n\nIn R, data.frames can be subset similarly to other two-dimensional data structures. The `[` in R is used \nto denote subsetting of any kind. When working with two-dimensional data, we need two values inside the `[ ]`\nto specify the details. The specification is `[rows, columns]`. For example, to get the first three rows of `ydat`,\nuse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nydat[1:3, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  symbol systematic_name nutrient rate expression\n1   SFB2         YNL049C  Glucose 0.05      -0.24\n2   <NA>         YNL095C  Glucose 0.05       0.28\n3   QRI7         YDL104C  Glucose 0.05      -0.02\n                            bp\n1        ER to Golgi transport\n2   biological process unknown\n3 proteolysis and peptidolysis\n                             mf\n1    molecular function unknown\n2    molecular function unknown\n3 metalloendopeptidase activity\n```\n\n\n:::\n:::\n\n\nNote how the second number, the columns, is blank. R takes that to mean \"all the columns\". Similarly, we can\ncombine rows and columns specification arbitrarily.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nydat[1:3, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  symbol systematic_name nutrient\n1   SFB2         YNL049C  Glucose\n2   <NA>         YNL095C  Glucose\n3   QRI7         YDL104C  Glucose\n```\n\n\n:::\n:::\n\n\nBecause selecting a single variable, or column, is such a common operation, there are two shortcuts for\ndoing so *with data.frames*. The first, the `$` operator works like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the column names, just to refresh memory\ncolnames(ydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"symbol\"          \"systematic_name\" \"nutrient\"       \n[4] \"rate\"            \"expression\"      \"bp\"             \n[7] \"mf\"             \n```\n\n\n:::\n\n```{.r .cell-code}\n# Note that I am using \"head\" here to limit the output\nhead(ydat$symbol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"SFB2\" NA     \"QRI7\" \"CFT2\" \"SSO2\" \"PSP2\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# What is the actual length of \"symbol\"?\nlength(ydat$symbol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 198430\n```\n\n\n:::\n:::\n\n\nThe second is related to the fact that, in R, data.frames are also lists. We subset a list by using `[[]]` notation.\nTo get the second column of `ydat`, we can use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ydat[[2]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"YNL049C\" \"YNL095C\" \"YDL104C\" \"YLR115W\" \"YMR183C\"\n[6] \"YML017W\"\n```\n\n\n:::\n:::\n\n\nAlternatively, we can use the column name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ydat[[\"systematic_name\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"YNL049C\" \"YNL095C\" \"YDL104C\" \"YLR115W\" \"YMR183C\"\n[6] \"YML017W\"\n```\n\n\n:::\n:::\n\n\n### Some data exploration\n\nThere are a couple of columns that include numeric values. Which columns are numeric?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(ydat$symbol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(ydat$rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(ydat$expression)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\nMake histograms of:\n- the expression values\n- the rate values\n\nWhat does the `table()` function do? Could you use that to look a the\n`rate` column given that that column appears to have repeated values?\n\nWhat `rate` corresponds to the most nutrient-starved condition?\n\n### More advanced indexing and subsetting\n\nWe can use, for example, logical values (TRUE/FALSE) to subset data.frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ydat[ydat$symbol == 'LEU1', ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     symbol systematic_name nutrient rate expression   bp\nNA     <NA>            <NA>     <NA>   NA         NA <NA>\nNA.1   <NA>            <NA>     <NA>   NA         NA <NA>\nNA.2   <NA>            <NA>     <NA>   NA         NA <NA>\nNA.3   <NA>            <NA>     <NA>   NA         NA <NA>\nNA.4   <NA>            <NA>     <NA>   NA         NA <NA>\nNA.5   <NA>            <NA>     <NA>   NA         NA <NA>\n       mf\nNA   <NA>\nNA.1 <NA>\nNA.2 <NA>\nNA.3 <NA>\nNA.4 <NA>\nNA.5 <NA>\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(ydat[ydat$symbol == 'LEU1', ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         symbol systematic_name nutrient rate expression\nNA.47244   <NA>            <NA>     <NA>   NA         NA\nNA.47245   <NA>            <NA>     <NA>   NA         NA\nNA.47246   <NA>            <NA>     <NA>   NA         NA\nNA.47247   <NA>            <NA>     <NA>   NA         NA\nNA.47248   <NA>            <NA>     <NA>   NA         NA\nNA.47249   <NA>            <NA>     <NA>   NA         NA\n           bp   mf\nNA.47244 <NA> <NA>\nNA.47245 <NA> <NA>\nNA.47246 <NA> <NA>\nNA.47247 <NA> <NA>\nNA.47248 <NA> <NA>\nNA.47249 <NA> <NA>\n```\n\n\n:::\n:::\n\n\nWhat is the problem with this approach? It appears that there are a bunch of `NA` values. Taking a quick look at the \n`symbol` column, we see what the problem. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(ydat$symbol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Length     Class      Mode \n   198430 character character \n```\n\n\n:::\n:::\n\n\nUsing the `is.na()` function, we can make filter further to get down to values of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ydat[ydat$symbol == 'LEU1' & !is.na(ydat$symbol), ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      symbol systematic_name nutrient rate expression\n1526    LEU1         YGL009C  Glucose 0.05      -1.12\n7043    LEU1         YGL009C  Glucose 0.10      -0.77\n12555   LEU1         YGL009C  Glucose 0.15      -0.67\n18071   LEU1         YGL009C  Glucose 0.20      -0.59\n23603   LEU1         YGL009C  Glucose 0.25      -0.20\n29136   LEU1         YGL009C  Glucose 0.30       0.03\n                        bp\n1526  leucine biosynthesis\n7043  leucine biosynthesis\n12555 leucine biosynthesis\n18071 leucine biosynthesis\n23603 leucine biosynthesis\n29136 leucine biosynthesis\n                                          mf\n1526  3-isopropylmalate dehydratase activity\n7043  3-isopropylmalate dehydratase activity\n12555 3-isopropylmalate dehydratase activity\n18071 3-isopropylmalate dehydratase activity\n23603 3-isopropylmalate dehydratase activity\n29136 3-isopropylmalate dehydratase activity\n```\n\n\n:::\n:::\n\n\nSometimes, looking at the data themselves is not that important. Using `dim()` is one possibility to look at the\nnumber of rows and columns after subsetting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(ydat[ydat$expression > 3, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 714   7\n```\n\n\n:::\n:::\n\n\nFind the high expressed genes when leucine-starved. For this task we can also use `subset` which allows \nus to treat column names as R variables (no `$` needed).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset(ydat, nutrient == 'Leucine' & rate == 0.05 & expression > 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       symbol systematic_name nutrient rate expression\n133768   QDR2         YIL121W  Leucine 0.05       4.61\n133772   LEU1         YGL009C  Leucine 0.05       3.84\n133858   BAP3         YDR046C  Leucine 0.05       4.29\n135186   <NA>         YPL033C  Leucine 0.05       3.43\n135187   <NA>         YLR267W  Leucine 0.05       3.23\n135288   HXT3         YDR345C  Leucine 0.05       5.16\n135963   TPO2         YGR138C  Leucine 0.05       3.75\n135965   YRO2         YBR054W  Leucine 0.05       4.40\n136102   GPG1         YGL121C  Leucine 0.05       3.08\n136109  HSP42         YDR171W  Leucine 0.05       3.07\n136119   HXT5         YHR096C  Leucine 0.05       4.90\n136151   <NA>         YJL144W  Leucine 0.05       3.06\n136152   MOH1         YBL049W  Leucine 0.05       3.43\n136153   <NA>         YBL048W  Leucine 0.05       3.95\n136189  HSP26         YBR072W  Leucine 0.05       4.86\n136231   NCA3         YJL116C  Leucine 0.05       4.03\n136233   <NA>         YBR116C  Leucine 0.05       3.28\n136486   <NA>         YGR043C  Leucine 0.05       3.07\n137443   ADH2         YMR303C  Leucine 0.05       4.15\n137448   ICL1         YER065C  Leucine 0.05       3.54\n137451   SFC1         YJR095W  Leucine 0.05       3.72\n137569   MLS1         YNL117W  Leucine 0.05       3.76\n                                              bp\n133768                       multidrug transport\n133772                      leucine biosynthesis\n133858                      amino acid transport\n135186                                  meiosis*\n135187                biological process unknown\n135288                          hexose transport\n135963                       polyamine transport\n135965                biological process unknown\n136102                       signal transduction\n136109                       response to stress*\n136119                          hexose transport\n136151                   response to dessication\n136152                biological process unknown\n136153                                      <NA>\n136189                       response to stress*\n136231 mitochondrion organization and biogenesis\n136233                                      <NA>\n136486                biological process unknown\n137443                             fermentation*\n137448                          glyoxylate cycle\n137451                       fumarate transport*\n137569                          glyoxylate cycle\n                                           mf\n133768         multidrug efflux pump activity\n133772 3-isopropylmalate dehydratase activity\n133858        amino acid transporter activity\n135186             molecular function unknown\n135187             molecular function unknown\n135288          glucose transporter activity*\n135963          spermine transporter activity\n135965             molecular function unknown\n136102             signal transducer activity\n136109               unfolded protein binding\n136119          glucose transporter activity*\n136151             molecular function unknown\n136152             molecular function unknown\n136153                                   <NA>\n136189               unfolded protein binding\n136231             molecular function unknown\n136233                                   <NA>\n136486                 transaldolase activity\n137443         alcohol dehydrogenase activity\n137448              isocitrate lyase activity\n137451 succinate:fumarate antiporter activity\n137569               malate synthase activity\n```\n\n\n:::\n:::\n\n\n## Aggregating data\n\nAggregating data, or summarizing by category, is a common way to look\nfor trends or differences in measurements between categories. Use `aggregate`\nto find the mean expression by gene symbol.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(aggregate(ydat$expression, by=list( ydat$symbol), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Group.1           x\n1    AAC1  0.52888889\n2    AAC3 -0.21628571\n3   AAD10  0.43833333\n4   AAD14 -0.07166667\n5   AAD16  0.24194444\n6    AAD4 -0.79166667\n```\n\n\n:::\n\n```{.r .cell-code}\n# or \nhead(aggregate(expression ~ symbol, mean, data=ydat))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  symbol  expression\n1   AAC1  0.52888889\n2   AAC3 -0.21628571\n3  AAD10  0.43833333\n4  AAD14 -0.07166667\n5  AAD16  0.24194444\n6   AAD4 -0.79166667\n```\n\n\n:::\n:::\n\n\n## Creating a data.frame from scratch\n\nSometimes it is useful to combine related data into one object. For example, let's simulate some data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoker = factor(rep(c(\"smoker\", \"non-smoker\"), each=50))\nsmoker_numeric = as.numeric(smoker)\nx = rnorm(100)\nrisk = x + 2*smoker_numeric\n```\n:::\n\n\nWe have two varibles, `risk` and `smoker` that are related. We can make a data.frame out of them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoker_risk = data.frame(smoker = smoker, risk = risk)\nhead(smoker_risk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  smoker     risk\n1 smoker 3.460632\n2 smoker 2.811295\n3 smoker 4.010997\n4 smoker 4.243112\n5 smoker 2.746992\n6 smoker 2.990194\n```\n\n\n:::\n:::\n\n\nR also has plotting shortcuts that work with data.frames to simplify plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot( risk ~ smoker, data=smoker_risk)\n```\n\n::: {.cell-output-display}\n![](dataframes_intro_files/figure-pdf/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Saving a data.frame\n\nOnce we have a data.frame of interest, we may want to save it. The most\nportable way to save a data.frame is to use one of the `write` functions. In\nthis case, let's save the data as a `.csv` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(smoker_risk, \"smoker_risk.csv\")\n```\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}