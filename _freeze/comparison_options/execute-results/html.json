{
  "hash": "68a82c3b815ab960f4cbcd758d244c2c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Base R vs tidy\nauthors: Sean Davis, Martin Morgan, Lori Kern\n---\n\nR is flexible and often has multiple ways of accomplishing the same or similar\ntasks. Find the options, packages, styles, etc. that work best for you. In this\nchapter, we will recap some of the previous BRFSS study that utilized base R\nobjects and graphing, and compare doing the same exact anaysis using\n[tidyverse](https://www.tidyverse.org/) and [ggplot2](https://ggplot2.tidyverse.org/).\n\n\n## Loading the Dataset\n\nFirst, let's load the dataset into R. We will use the `read.csv()` function from\nthe base R package to read the data and store it in a data frame called\nbrfss. We will also use the `read_csv()` function from the readr package to load\nthe tidyverse tibble data.frame. Make sure the CSV file is in your working\ndirectory, or provide the full path to the file.\n\n<!--\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n:::\n\n-->\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- file.choose()    # look for BRFSS-subset.csv\n\n# We will be using dplyr throughout so let's load now\nlibrary(dplyr)\n```\n:::\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# loading using base R\nstopifnot(file.exists(path))\nbrfss_DF <- read.csv(path)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# loading using readr\nlibrary(readr)\nbrfss_tbl <- readr::read_csv(path)\n```\n:::\n\n:::\n:::\n\nLet's examine our objects:\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Classic data frame\nhead(brfss_DF)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Age   Weight    Sex Height Year\n1  31 48.98798 Female 157.48 1990\n2  57 81.64663 Female 157.48 1990\n3  43 80.28585   Male 177.80 1990\n4  72 70.30682   Male 170.18 1990\n5  31 49.89516 Female 154.94 1990\n6  58 54.43108 Female 154.94 1990\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tidyverse tibble\nhead(brfss_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n    Age Weight Sex    Height  Year\n  <dbl>  <dbl> <chr>   <dbl> <dbl>\n1    31   49.0 Female   157.  1990\n2    57   81.6 Female   157.  1990\n3    43   80.3 Male     178.  1990\n4    72   70.3 Male     170.  1990\n5    31   49.9 Female   155.  1990\n6    58   54.4 Female   155.  1990\n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Classic data frame\nclass(brfss_DF)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tidyverse tibble\nclass(brfss_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: {.callout-note}\n**Note:** A tidyverse tibble object inherits a data.frame class. This means that\nmost data.frame operations like `dim()`, `colnames()`, `$`, `[`, etc. will work on the tibble\nobject as well. \n:::\n\n## Clean data\n\nBoth 'Sex' and 'Year' are really `factor` values (each can only take on specific\nlevels, 'Female' and 'Male' for 'Sex', and '1990' and '2010' for 'Year').\n\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R / data.frame\nbrfss_DF$Year <- factor(brfss_DF$Year)\nbrfss_DF$Sex <- factor(brfss_DF$Sex)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr / tibble \nbrfss_tbl <-\nbrfss_tbl |>\n    mutate(\n        Sex = factor(Sex,\n\t      levels = c(\"Female\", \"Male\")),\n        Year = factor(Year,\n\t      levels = c(\"1990\", \"2010\"))\n    )\n```\n:::\n\n:::\n:::\n\n## Data Exploration\n\nLet's execute some basic exploration.  `summary()` works the same for both\nobjects but lets looks at some summary tables and counts. They produce the same\nresults but in different formats.\n\nWe'll start with basic table of a single variable:\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R / data.frame\ntable(brfss_DF$Year)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr / tibble\nbrfss_tbl |> count(Year)\n```\n:::\n\n:::\n:::\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1990  2010 \n10000 10000 \n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  Year      n\n  <fct> <int>\n1 1990  10000\n2 2010  10000\n```\n\n\n:::\n:::\n\n:::\n:::\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R / data.frame\ntable(brfss_DF$Sex)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr / tibble\nbrfss_tbl |> count(Sex)\n```\n:::\n\n:::\n:::\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFemale   Male \n 12039   7961 \n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  Sex        n\n  <fct>  <int>\n1 Female 12039\n2 Male    7961\n```\n\n\n:::\n:::\n\n:::\n:::\n\n\nNow let's look at contingency table\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R / data.frame\ntable(brfss_DF$Sex, brfss_DF$Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        \n         1990 2010\n  Female 5718 6321\n  Male   4282 3679\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr / tibble\nbrfss_tbl |> count(Sex, Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  Sex    Year      n\n  <fct>  <fct> <int>\n1 Female 1990   5718\n2 Female 2010   6321\n3 Male   1990   4282\n4 Male   2010   3679\n```\n\n\n:::\n:::\n\n:::\n:::\n\nWe can get the tidy table to look even more similar to the base R table with the\nhelp of the tidyr package's function `pivot_wider`\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R / data.frame\ntable(brfss_DF$Sex, brfss_DF$Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        \n         1990 2010\n  Female 5718 6321\n  Male   4282 3679\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr / tibble\nlibrary(tidyr)\nbrfss_tbl |> count(Sex, Year) |>\n    tidyr::pivot_wider(names_from = \"Year\", values_from = \"n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  Sex    `1990` `2010`\n  <fct>   <int>  <int>\n1 Female   5718   6321\n2 Male     4282   3679\n```\n\n\n:::\n:::\n\n:::\n:::\n\nWhat about some summary statistics on the columns of data? `summarize()` will\ncreate the new data.frame automatically; base R you have to create your own.\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R / data.frame\ndata.frame(\n  avg_age = mean(brfss_DF$Age, na.rm = TRUE),\n  ave_wt  = mean(brfss_DF$Weight, na.rm = TRUE),\n  ave_ht  = mean(brfss_DF$Height, na.rm = TRUE)\n)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr / tibble\nbrfss_tbl |>\n    summarize(\n        avg_age = mean(Age, na.rm = TRUE),\n        ave_wt = mean(Weight, na.rm = TRUE),\n        ave_ht = mean(Height, na.rm = TRUE)\n\t)\n```\n:::\n\n:::\n:::\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   avg_age   ave_wt   ave_ht\n1 50.99164 75.42455 169.2131\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  avg_age ave_wt ave_ht\n    <dbl>  <dbl>  <dbl>\n1    51.0   75.4   169.\n```\n\n\n:::\n:::\n\n:::\n:::\n\nIf we want to get more complex with groupings by Year and Sex, dlpyr uses\n`group_by` where base R would use `aggregate`.\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R / data.frame\naggregate(\n  cbind(Age, Weight, Height) ~ Sex + Year,\n  data = brfss_DF,\n  FUN = function(x) mean(x, na.rm = TRUE)\n)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr / tibble\nbrfss_tbl |>\n    group_by(Sex, Year) |>\n    summarize(\n        avg_age = mean(Age, na.rm = TRUE),\n        ave_wt = mean(Weight, na.rm = TRUE),\n        ave_ht = mean(Height, na.rm = TRUE)\n    )\n```\n:::\n\n:::\n:::\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     Sex Year      Age   Weight   Height\n1 Female 1990 46.09153 64.84333 163.2914\n2   Male 1990 43.87574 81.19496 178.2242\n3 Female 2010 57.07807 73.03178 163.2469\n4   Male 2010 56.25465 88.91136 178.0139\n```\n\n\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n# Groups:   Sex [2]\n  Sex    Year  avg_age ave_wt ave_ht\n  <fct>  <fct>   <dbl>  <dbl>  <dbl>\n1 Female 1990     46.2   64.8   163.\n2 Female 2010     57.1   73.0   163.\n3 Male   1990     43.9   81.2   178.\n4 Male   2010     56.2   88.8   178.\n```\n\n\n:::\n:::\n\n:::\n:::\n\n\n## Visualization\n\nBefore we start visualizing, lets create a few different subsets of data.\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R / data.frame\nbrfss_female_DF <-\n    brfss_DF[brfss_DF$Sex == \"Female\",]\nbrfss_male_DF <-\n    brfss_DF[brfss_DF$Sex == \"Male\",]\nbrfss_2010_DF <-\n    brfss_DF[brfss_DF$Year == \"2010\",]\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr / tibble\nbrfss_male_tbl <-\n    brfss_tbl |> filter(Sex == \"Male\")\nbrfss_female_tbl <-\n    brfss_tbl |> filter(Sex == \"Female\")\nbrfss_2010_tbl <-\n    brfss_tbl |> filter(Year == \"2010\")\n```\n:::\n\n:::\n:::\n\nWe should also load the ggplot2 package so we can compare base R graphics vs\nggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nLet's start with a boxplot that compares the Weights of Males vs Females for the\n2010 dataset.\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\nplot(Weight ~ Sex, brfss_2010_DF)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot2\nggplot(brfss_2010_tbl) +\n    aes(x = Sex, y = Weight) +\n    geom_boxplot()\n```\n:::\n\n:::\n:::\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n\nLet's look at some density and scatterplots.\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\nden_male <- density(brfss_2010_DF$Weight[brfss_2010_DF$Sex == \"Male\"], na.rm = TRUE)\nden_female <- density(brfss_2010_DF$Weight[brfss_2010_DF$Sex == \"Female\"], na.rm = TRUE)\nplot(den_male, \n     col = \"skyblue\", lwd = 2,\n     main = \"Density of Weight by Sex\",\n     xlab = \"Weight\")\n\nlines(den_female, \n      col = \"lightsalmon\", lwd = 2)\n\nlegend(\"topright\",\n    legend = c(\"Male\", \"Female\"),\n    col = c(\"skyblue\", \"lightsalmon\"), lwd = 2)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot2\nbrfss_2010_tbl |>\n    ggplot() +\n    aes(x = Weight, color= Sex) +\n    geom_density()\n```\n:::\n\n:::\n:::\n\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\nPresumably taller people are heavier than shorter people. Let's examine this\nrelationship.\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\nplot(Weight ~ Height, brfss_2010_DF)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot2\nbrfss_2010_tbl |>\n    ggplot() +\n    aes(x = Height, y = Weight) +\n    geom_point()\n```\n:::\n\n:::\n:::\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\nLet's fit the linear regression\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\nplot(Weight ~ Height, brfss_2010_DF)\nfit <- lm(Weight ~ Height, brfss_2010_DF)\nabline(fit, col=\"blue\", lwd=2)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot2\nbrfss_2010_tbl |>\n    ggplot() +\n    aes(x = Height, y = Weight) +\n    geom_point() +\n    geom_smooth(method = \"lm\")\n```\n:::\n\n:::\n:::\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\nWe saw that there could be a difference based on Sex. Let's add color to the\npoints\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\ncolors <- c(\"Female\" = \"lightsalmon\", \"Male\" = \"skyblue\")\nplot(Weight ~ Height, brfss_2010_DF,\n  col = colors[Sex], pch = 16)\nfor (sex in levels(brfss_2010_DF$Sex)) {\n  subset_data <- subset(brfss_2010_DF, Sex == sex)\n  fit <- lm(Weight ~ Height, data = subset_data)\n  abline(fit, col = colors[sex], lwd = 2)\n}\nlegend(\"topleft\", legend = levels(brfss_2010_DF$Sex), \n       col = colors, pch = 16, bty = \"n\")\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot2\nbrfss_2010_tbl |>\n    ggplot() +\n    aes(x = Height, y = Weight, color = Sex) +\n    geom_point() +\n    geom_smooth(method = \"lm\")\n```\n:::\n\n:::\n:::\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\nLet's dig into some visualizations of the 2010 Males and recreate the\nhistograms of Weight but we did not create that subset.\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\nbrfss_2010_Male <- subset(brfss_DF,\n    Year == 2010 & Sex == \"Male\")\nhist(brfss_2010_Male$Weight)\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot2\nbrfss_2010_tbl |> filter(Sex == \"Male\") |>\n    ggplot() +\n    aes(x = Weight) +\n    geom_histogram(col = \"white\")\n```\n:::\n\n:::\n:::\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\nWhat if we took all the Males and looked to see if the relationship of Height\nand Weight changed between 1990 and 2010.\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# base R\ncolors <- c(\"1990\" = \"lightsalmon\",\"2010\" = \"skyblue\")\nplot(log10(Weight) ~ Height, brfss_male_DF,\n  col = colors[Year], pch = 16, ylab = \"log10(Weight)\")\nfor (yr in levels(brfss_male_DF$Year)) {\n  subset_data <- subset(brfss_male_DF, Year == yr)\n  fit <- lm(log10(Weight) ~ Height, data = subset_data)\n  abline(fit, col = colors[yr], lwd = 2)\n}\nlegend(\"topleft\", legend = levels(brfss_male_DF$Year), \n       col = colors, pch = 16, bty = \"n\")\n```\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot2\nggplot(brfss_male_tbl) +\n    aes(x = Height, y = log10(Weight), color = Year) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    labs(title = \"BRFSS Male Subset\")\n```\n:::\n\n:::\n:::\n\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](comparison_options_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n\n## Summary\n\nThere are many visualization packages in R. You can explore the many options and\nwhat each has to offer to design high quality, customized plots for reporting. ",
    "supporting": [
      "comparison_options_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}