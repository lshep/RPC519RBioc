{
  "hash": "2da65cb71d8434262c5b908ca15c95dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factors\"\nauthor: \"Sean Davis & Lori Kern\"\n---\n\n## Factors\n\nA factor is a special type of vector, normally used to hold a\ncategorical variable--such as smoker/nonsmoker, state of residency, zipcode--in many statistical functions. Such vectors have class “factor”. Factors are primarily used in Analysis of Variance (ANOVA) or other situations when \"categories\" are needed. When a factor is used as a predictor variable, the corresponding indicator variables are created (more later).\n\nNote of caution that factors in R often *appear* to be character vectors\nwhen printed, but you will notice that they do not have double quotes\naround them. They are stored in R as numbers with a key name, so\nsometimes you will note that the factor *behaves* like a numeric vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create the character vector\ncitizen<-c(\"uk\",\"us\",\"no\",\"au\",\"uk\",\"us\",\"us\",\"no\",\"au\") \n\n# convert to factor\ncitizenf<-factor(citizen)                                \ncitizen             \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"uk\" \"us\" \"no\" \"au\" \"uk\" \"us\" \"us\" \"no\" \"au\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncitizenf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] uk us no au uk us us no au\nLevels: au no uk us\n```\n\n\n:::\n\n```{.r .cell-code}\n# convert factor back to character vector\nas.character(citizenf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"uk\" \"us\" \"no\" \"au\" \"uk\" \"us\" \"us\" \"no\" \"au\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# convert to numeric vector\nas.numeric(citizenf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4 2 1 3 4 4 2 1\n```\n\n\n:::\n:::\n\n\nR stores many data structures as vectors with \"attributes\" and \"class\" (just so you have seen this).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(citizenf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$levels\n[1] \"au\" \"no\" \"uk\" \"us\"\n\n$class\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(citizenf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# note that after unclassing, we can see the \n# underlying numeric structure again\nunclass(citizenf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4 2 1 3 4 4 2 1\nattr(,\"levels\")\n[1] \"au\" \"no\" \"uk\" \"us\"\n```\n\n\n:::\n:::\n\n\nTabulating factors is a useful way to get a sense of the \"sample\" set available. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(citizenf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncitizenf\nau no uk us \n 2  2  2  3 \n```\n\n\n:::\n:::\n\n\nThe default factor levels are the unique set of possible values. It is possible\nto specify a subset of factor levels. Note how missing values are introduced if\na value is not included.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncitizenf2 <- factor(citizen, levels=c(\"us\", \"uk\"))\ncitizenf2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] uk   us   <NA> <NA> uk   us   us   <NA> <NA>\nLevels: us uk\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(citizenf2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncitizenf2\nus uk \n 3  2 \n```\n\n\n:::\n:::\n\n\nMissing values are exlcuded by default. There is an option to override this\nsetting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naddNA(citizenf2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] uk   us   <NA> <NA> uk   us   us   <NA> <NA>\nLevels: us uk <NA>\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(addNA(citizenf2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  us   uk <NA> \n   3    2    4 \n```\n\n\n:::\n:::\n\n\n::: {.callout-caution}\nThis emphasizes that default settings may or may not be appropriate for your\nanalysis. It's important to know what those settings are and choose alternatives\nas necessary.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}