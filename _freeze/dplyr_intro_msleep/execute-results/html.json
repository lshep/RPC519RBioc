{
  "hash": "7142d57a4d28ef7c1f0b41518ba45d34",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Introduction to dplyr: mammal sleep dataset'\nauthor: \"Stephen Turner (with modifications by Sean Davis)\"\n---\n\n\nThe dataset we will be using to introduce the *dplyr* package is an updated and expanded version of the mammals sleep dataset. Updated sleep times and weights were taken from V. M. Savage and G. B. West. A quantitative, theoretical framework for understanding mammalian sleep[^msleep]. \n\n\n## Learning goals\n\n* Know that `dplyr` is just a different approach to manipulating data in data.frames.\n* List the commonly used `dplyr` verbs and how they can be used to manipulate data.frames.\n* Show how to aggregate and summarized data using `dplyr`\n* Know what the piping operator, `|>`, is and how it can be used.\n\n## Learning objectives\n\n* Select subsets of the mammal sleep dataset.\n* Reorder the dataset.\n* Add columns to the dataset based on existing columns.\n* Summarize the amount of sleep by categorical variables using `group_by` and `summarize`.\n\n## What is dplyr?\n\nThe *dplyr* package is a specialized package for working with `data.frames` (and the related `tibble`) to transform and summarize tabular data with rows and columns. For another explanation of dplyr see the dplyr package vignette: [Introduction to dplyr](http://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)\n\n## Why Is dplyr userful?\n\ndplyr contains a set of functions--commonly called the dplyr \"verbs\"--that perform common data manipulations such as filtering for rows, selecting specific columns, re-ordering rows, adding new columns and summarizing data. In addition, dplyr contains a useful function to perform another common task which is the \"split-apply-combine\" concept.\n\nCompared to base functions in R, the functions in dplyr are often easier to work with, are more consistent in the syntax and are targeted for data analysis around data frames, instead of just vectors. \n\n\n## Data: Mammals Sleep\n\nThe msleep (mammals sleep) data set contains the sleep times and weights for a set of mammals and is available in the dagdata repository on github. This data set contains 83 rows and 11 variables. The data happen to be available as\na `data`set in the *ggplot2* package. To get access to the `msleep` dataset, we need to first install the ggplot2 package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('ggplot2')\n```\n:::\n\n\nThen, we can load the library.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndata(msleep)\n```\n:::\n\n\nAs with many datasets in R, \"help\" is available to describe the dataset itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?msleep\n```\n:::\n\n\nThe columns are described in the help page, but are included here, also. \n\ncolumn name | Description\n--- | ---\nname | common name\ngenus | taxonomic rank\nvore | carnivore, omnivore or herbivore?\norder | taxonomic rank\nconservation | the conservation status of the mammal\nsleep\\_total | total amount of sleep, in hours\nsleep\\_rem | rem sleep, in hours\nsleep\\_cycle | length of sleep cycle, in hours\nawake | amount of time spent awake, in hours\nbrainwt | brain weight in kilograms\nbodywt | body weight in kilograms\n\n\n## dplyr verbs\n\nThe dplyr verbs are listed here. There are many other functions available in dplyr, but we will focus on just these.\n\ndplyr verbs | Description\n--- | ---\n`select()` | select columns \n`filter()` | filter rows\n`arrange()` | re-order or arrange rows\n`mutate()` | create new columns\n`summarise()` | summarise values\n`group_by()` | allows for group operations in the \"split-apply-combine\" concept\n\n\n## Using the dplyr verbs\n\nThe two most basic functions are `select()` and `filter()`, which selects columns and filters rows respectively. What \nare the equivalent ways to select columns without dplyr? And filtering to include only specific rows?\n\nBefore proceeding, we need to install the dplyr package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('dplyr')\n```\n:::\n\n\nAnd then load the library:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n:::\n\n\n\n\n### Selecting columns: `select()`\n\nSelect a set of columns such as the `name` and the `sleep_total` columns. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsleepData <- select(msleep, name, sleep_total)\nhead(sleepData)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  name                       sleep_total\n  <chr>                            <dbl>\n1 Cheetah                           12.1\n2 Owl monkey                        17  \n3 Mountain beaver                   14.4\n4 Greater short-tailed shrew        14.9\n5 Cow                                4  \n6 Three-toed sloth                  14.4\n```\n\n\n:::\n:::\n\n\nTo select all the columns *except* a specific column, use the \"-\" (subtraction) operator (also known as negative indexing). For example, to select all columns except `name`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(select(msleep, -name))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 10\n  genus      vore  order    conservation sleep_total sleep_rem sleep_cycle awake\n  <chr>      <chr> <chr>    <chr>              <dbl>     <dbl>       <dbl> <dbl>\n1 Acinonyx   carni Carnivo… lc                  12.1      NA        NA      11.9\n2 Aotus      omni  Primates <NA>                17         1.8      NA       7  \n3 Aplodontia herbi Rodentia nt                  14.4       2.4      NA       9.6\n4 Blarina    omni  Soricom… lc                  14.9       2.3       0.133   9.1\n5 Bos        herbi Artioda… domesticated         4         0.7       0.667  20  \n6 Bradypus   herbi Pilosa   <NA>                14.4       2.2       0.767   9.6\n# ℹ 2 more variables: brainwt <dbl>, bodywt <dbl>\n```\n\n\n:::\n:::\n\n\nTo select a range of columns by name, use the \":\" operator. Note that dplyr allows us to use the column names \nwithout quotes and as \"indices\" of the columns. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(select(msleep, name:order))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  name                       genus      vore  order       \n  <chr>                      <chr>      <chr> <chr>       \n1 Cheetah                    Acinonyx   carni Carnivora   \n2 Owl monkey                 Aotus      omni  Primates    \n3 Mountain beaver            Aplodontia herbi Rodentia    \n4 Greater short-tailed shrew Blarina    omni  Soricomorpha\n5 Cow                        Bos        herbi Artiodactyla\n6 Three-toed sloth           Bradypus   herbi Pilosa      \n```\n\n\n:::\n:::\n\n\nTo select all columns that start with the character string \"sl\", use the function `starts_with()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(select(msleep, starts_with(\"sl\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  sleep_total sleep_rem sleep_cycle\n        <dbl>     <dbl>       <dbl>\n1        12.1      NA        NA    \n2        17         1.8      NA    \n3        14.4       2.4      NA    \n4        14.9       2.3       0.133\n5         4         0.7       0.667\n6        14.4       2.2       0.767\n```\n\n\n:::\n:::\n\n\nSome additional options to select columns based on a specific criteria include:\n\n1. `ends_with()` = Select columns that end with a character string\n2. `contains()` = Select columns that contain a character string\n3. `matches()` = Select columns that match a regular expression\n4. `one_of()` = Select column names that are from a group of names\n\n### Selecting rows: `filter()`\n\nThe `filter()` function allows us to filter rows to include only those rows that *match* the filter. For example, we can filter the rows for mammals that sleep a total of more than 16 hours. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(msleep, sleep_total >= 16)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 11\n  name    genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n  <chr>   <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n1 Owl mo… Aotus omni  Prim… <NA>                17         1.8      NA       7  \n2 Long-n… Dasy… carni Cing… lc                  17.4       3.1       0.383   6.6\n3 North … Dide… omni  Dide… lc                  18         4.9       0.333   6  \n4 Big br… Epte… inse… Chir… lc                  19.7       3.9       0.117   4.3\n5 Thick-… Lutr… carni Dide… lc                  19.4       6.6      NA       4.6\n6 Little… Myot… inse… Chir… <NA>                19.9       2         0.2     4.1\n7 Giant … Prio… inse… Cing… en                  18.1       6.1      NA       5.9\n8 Arctic… Sper… herbi Rode… lc                  16.6      NA        NA       7.4\n# ℹ 2 more variables: brainwt <dbl>, bodywt <dbl>\n```\n\n\n:::\n:::\n\n\nFilter the rows for mammals that sleep a total of more than 16 hours *and* have a body weight of greater than 1 kilogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(msleep, sleep_total >= 16, bodywt >= 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 11\n  name    genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n  <chr>   <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n1 Long-n… Dasy… carni Cing… lc                  17.4       3.1       0.383   6.6\n2 North … Dide… omni  Dide… lc                  18         4.9       0.333   6  \n3 Giant … Prio… inse… Cing… en                  18.1       6.1      NA       5.9\n# ℹ 2 more variables: brainwt <dbl>, bodywt <dbl>\n```\n\n\n:::\n:::\n\n\nFilter the rows for mammals in the Perissodactyla and Primates taxonomic order. The `%in%` operator is a logical\noperator that returns `TRUE` for values of a vector that are present *in* a second vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(msleep, order %in% c(\"Perissodactyla\", \"Primates\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 11\n   name   genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n   <chr>  <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n 1 Owl m… Aotus omni  Prim… <NA>                17         1.8      NA       7  \n 2 Grivet Cerc… omni  Prim… lc                  10         0.7      NA      14  \n 3 Horse  Equus herbi Peri… domesticated         2.9       0.6       1      21.1\n 4 Donkey Equus herbi Peri… domesticated         3.1       0.4      NA      20.9\n 5 Patas… Eryt… omni  Prim… lc                  10.9       1.1      NA      13.1\n 6 Galago Gala… omni  Prim… <NA>                 9.8       1.1       0.55   14.2\n 7 Human  Homo  omni  Prim… <NA>                 8         1.9       1.5    16  \n 8 Mongo… Lemur herbi Prim… vu                   9.5       0.9      NA      14.5\n 9 Macaq… Maca… omni  Prim… <NA>                10.1       1.2       0.75   13.9\n10 Slow … Nyct… carni Prim… <NA>                11        NA        NA      13  \n11 Chimp… Pan   omni  Prim… <NA>                 9.7       1.4       1.42   14.3\n12 Baboon Papio omni  Prim… <NA>                 9.4       1         0.667  14.6\n13 Potto  Pero… omni  Prim… lc                  11        NA        NA      13  \n14 Squir… Saim… omni  Prim… <NA>                 9.6       1.4      NA      14.4\n15 Brazi… Tapi… herbi Peri… vu                   4.4       1         0.9    19.6\n# ℹ 2 more variables: brainwt <dbl>, bodywt <dbl>\n```\n\n\n:::\n:::\n\n\nYou can use the boolean operators (e.g. >, <, >=, <=, !=, %in%) to create the logical tests. \n\n## \"Piping\"\" with `|>`\n\nIt is not unusual to want to perform a set of operations using dplyr. The pipe operator `|>` allows us to \n\"pipe\" the output from one function into the input of the next. While there is nothing special about how R\ntreats operations that are written in a pipe, the idea of piping is to allow us to read multiple\nfunctions operating one after another from left-to-right. Without piping, one would either 1) save each\nstep in set of functions as a temporary variable and then pass that variable along the chain or 2) have to\n\"nest\" functions, which can be hard to read. \n\nHere's an example we have already used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(select(msleep, name, sleep_total))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  name                       sleep_total\n  <chr>                            <dbl>\n1 Cheetah                           12.1\n2 Owl monkey                        17  \n3 Mountain beaver                   14.4\n4 Greater short-tailed shrew        14.9\n5 Cow                                4  \n6 Three-toed sloth                  14.4\n```\n\n\n:::\n:::\n\n\nNow in this case, we will pipe the msleep data frame to the function that will select two columns (`name` and `sleep\\_total`) and then pipe the new data frame to the function `head()`, which will return the head of the new data frame. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    select(name, sleep_total) |> \n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  name                       sleep_total\n  <chr>                            <dbl>\n1 Cheetah                           12.1\n2 Owl monkey                        17  \n3 Mountain beaver                   14.4\n4 Greater short-tailed shrew        14.9\n5 Cow                                4  \n6 Three-toed sloth                  14.4\n```\n\n\n:::\n:::\n\n\nYou will soon see how useful the pipe operator is when we start to combine many functions.  \n\nNow that you know about the pipe operator (|>), we will use it throughout the rest of this tutorial. \n\n\n### Arrange Or Re-order Rows Using `arrange()`\n\nTo arrange (or re-order) rows by a particular column, such as the taxonomic order, list the name of the column you want to arrange the rows by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> arrange(order) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  name    genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n  <chr>   <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n1 Tenrec  Tenr… omni  Afro… <NA>                15.6       2.3      NA       8.4\n2 Cow     Bos   herbi Arti… domesticated         4         0.7       0.667  20  \n3 Roe de… Capr… herbi Arti… lc                   3        NA        NA      21  \n4 Goat    Capri herbi Arti… lc                   5.3       0.6      NA      18.7\n5 Giraffe Gira… herbi Arti… cd                   1.9       0.4      NA      22.1\n6 Sheep   Ovis  herbi Arti… domesticated         3.8       0.6      NA      20.2\n# ℹ 2 more variables: brainwt <dbl>, bodywt <dbl>\n```\n\n\n:::\n:::\n\n\nNow we will select three columns from msleep, arrange the rows by the taxonomic order and then arrange the rows by sleep\\_total. Finally, show the head of the final data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    select(name, order, sleep_total) |>\n    arrange(order, sleep_total) |> \n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  name     order        sleep_total\n  <chr>    <chr>              <dbl>\n1 Tenrec   Afrosoricida        15.6\n2 Giraffe  Artiodactyla         1.9\n3 Roe deer Artiodactyla         3  \n4 Sheep    Artiodactyla         3.8\n5 Cow      Artiodactyla         4  \n6 Goat     Artiodactyla         5.3\n```\n\n\n:::\n:::\n\n\nSame as above, except here we filter the rows for mammals that sleep for 16 or more hours, instead of showing the head of the final data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    select(name, order, sleep_total) |>\n    arrange(order, sleep_total) |> \n    filter(sleep_total >= 16)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  name                   order           sleep_total\n  <chr>                  <chr>                 <dbl>\n1 Big brown bat          Chiroptera             19.7\n2 Little brown bat       Chiroptera             19.9\n3 Long-nosed armadillo   Cingulata              17.4\n4 Giant armadillo        Cingulata              18.1\n5 North American Opossum Didelphimorphia        18  \n6 Thick-tailed opposum   Didelphimorphia        19.4\n7 Owl monkey             Primates               17  \n8 Arctic ground squirrel Rodentia               16.6\n```\n\n\n:::\n:::\n\n\nFor something slightly more complicated do the same as above, except arrange the rows in the sleep\\_total column in a descending order. For this, use the function `desc()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    select(name, order, sleep_total) |>\n    arrange(order, desc(sleep_total)) |> \n    filter(sleep_total >= 16)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  name                   order           sleep_total\n  <chr>                  <chr>                 <dbl>\n1 Little brown bat       Chiroptera             19.9\n2 Big brown bat          Chiroptera             19.7\n3 Giant armadillo        Cingulata              18.1\n4 Long-nosed armadillo   Cingulata              17.4\n5 Thick-tailed opposum   Didelphimorphia        19.4\n6 North American Opossum Didelphimorphia        18  \n7 Owl monkey             Primates               17  \n8 Arctic ground squirrel Rodentia               16.6\n```\n\n\n:::\n:::\n\n\n\n## Create New Columns Using `mutate()`\n\nThe `mutate()` function will add new columns to the data frame. Create a new column called rem_proportion, which is the ratio of rem sleep to total amount of sleep. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    mutate(rem_proportion = sleep_rem / sleep_total) |>\n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 12\n  name    genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n  <chr>   <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n1 Cheetah Acin… carni Carn… lc                  12.1      NA        NA      11.9\n2 Owl mo… Aotus omni  Prim… <NA>                17         1.8      NA       7  \n3 Mounta… Aplo… herbi Rode… nt                  14.4       2.4      NA       9.6\n4 Greate… Blar… omni  Sori… lc                  14.9       2.3       0.133   9.1\n5 Cow     Bos   herbi Arti… domesticated         4         0.7       0.667  20  \n6 Three-… Brad… herbi Pilo… <NA>                14.4       2.2       0.767   9.6\n# ℹ 3 more variables: brainwt <dbl>, bodywt <dbl>, rem_proportion <dbl>\n```\n\n\n:::\n:::\n\n\nYou can add many new columns using mutate (separated by commas). Here we add a second column called bodywt_grams which is the bodywt column in grams. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    mutate(rem_proportion = sleep_rem / sleep_total, \n           bodywt_grams = bodywt * 1000) |>\n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 13\n  name    genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n  <chr>   <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n1 Cheetah Acin… carni Carn… lc                  12.1      NA        NA      11.9\n2 Owl mo… Aotus omni  Prim… <NA>                17         1.8      NA       7  \n3 Mounta… Aplo… herbi Rode… nt                  14.4       2.4      NA       9.6\n4 Greate… Blar… omni  Sori… lc                  14.9       2.3       0.133   9.1\n5 Cow     Bos   herbi Arti… domesticated         4         0.7       0.667  20  \n6 Three-… Brad… herbi Pilo… <NA>                14.4       2.2       0.767   9.6\n# ℹ 4 more variables: brainwt <dbl>, bodywt <dbl>, rem_proportion <dbl>,\n#   bodywt_grams <dbl>\n```\n\n\n:::\n:::\n\n\nIs there a relationship between `rem_proportion` and `bodywt`? How about `sleep_total`?\n\n### Create summaries: `summarise()`\n\nThe `summarise()` function will create summary statistics for a given column in the data frame such as finding the mean. For example, to compute the average number of hours of sleep, apply the `mean()` function to the column sleep\\_total and call the summary value avg\\_sleep. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    summarise(avg_sleep = mean(sleep_total))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  avg_sleep\n      <dbl>\n1      10.4\n```\n\n\n:::\n:::\n\n\nThere are many other summary statistics you could consider such `sd()`, `min()`, `max()`, `median()`, `sum()`, `n()` (returns the length of vector), `first()` (returns first value in vector), `last()` (returns last value in vector) and `n_distinct()` (number of distinct values in vector). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    summarise(avg_sleep = mean(sleep_total), \n              min_sleep = min(sleep_total),\n              max_sleep = max(sleep_total),\n              total = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  avg_sleep min_sleep max_sleep total\n      <dbl>     <dbl>     <dbl> <int>\n1      10.4       1.9      19.9    83\n```\n\n\n:::\n:::\n\n\n    \n## Grouping data: `group_by()`\n\nThe `group_by()` verb is an important function in dplyr. The `group_by` allows\nus to use the concept of \"split-apply-combine\". We\nliterally want to split the data frame by some variable\n(e.g. taxonomic order), apply a function to the individual data frames\nand then combine the output. This approach is similar to the `aggregate` function\nfrom R, but `group_by` integrates with dplyr. \n\nLet's do that: split the msleep data frame by the taxonomic order,\nthen ask for the same summary statistics as above. We expect a set of\nsummary statistics for each taxonomic order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep |> \n    group_by(order) |>\n    summarise(avg_sleep = mean(sleep_total), \n              min_sleep = min(sleep_total), \n              max_sleep = max(sleep_total),\n              total = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 5\n   order           avg_sleep min_sleep max_sleep total\n   <chr>               <dbl>     <dbl>     <dbl> <int>\n 1 Afrosoricida        15.6       15.6      15.6     1\n 2 Artiodactyla         4.52       1.9       9.1     6\n 3 Carnivora           10.1        3.5      15.8    12\n 4 Cetacea              4.5        2.7       5.6     3\n 5 Chiroptera          19.8       19.7      19.9     2\n 6 Cingulata           17.8       17.4      18.1     2\n 7 Didelphimorphia     18.7       18        19.4     2\n 8 Diprotodontia       12.4       11.1      13.7     2\n 9 Erinaceomorpha      10.2       10.1      10.3     2\n10 Hyracoidea           5.67       5.3       6.3     3\n11 Lagomorpha           8.4        8.4       8.4     1\n12 Monotremata          8.6        8.6       8.6     1\n13 Perissodactyla       3.47       2.9       4.4     3\n14 Pilosa              14.4       14.4      14.4     1\n15 Primates            10.5        8        17      12\n16 Proboscidea          3.6        3.3       3.9     2\n17 Rodentia            12.5        7        16.6    22\n18 Scandentia           8.9        8.9       8.9     1\n19 Soricomorpha        11.1        8.4      14.9     5\n```\n\n\n:::\n:::\n\n\n\n[^msleep]: A quantitative, theoretical framework for understanding mammalian sleep. Van M. Savage, Geoffrey B. West. Proceedings of the National Academy of Sciences Jan 2007, 104 (3) 1051-1056; DOI: [10.1073/pnas.0610080104](https://doi.org/10.1073/pnas.0610080104)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}