{
  "hash": "dbbfdda24accc22ebce46c3e082bda04",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"Sean Davis and Lori Kern\"\n---\n# Saving and Loading Workspaces and Objects\n\n## Rstudio Projects: Organizing Your Work\n\nBefore diving into reading and writing files, it's essential to understand how to organize your work effectively. RStudio Projects provide a powerful way to keep your files, scripts, and data organized in a self-contained workspace.\n\n### What are RStudio Projects?\n\nAn RStudio Project is a special folder that contains all the files associated with a particular analysis or research project. When you create a project, RStudio creates a `.Rproj` file that serves as the anchor for your project workspace. This approach offers several key benefits:\n\n- **Consistent working directory**: The project folder automatically becomes your working directory\n- **File organization**: All related files (scripts, data, outputs) are kept together\n- **Reproducibility**: Others can easily run your code without worrying about file paths\n- **Version control integration**: Projects work seamlessly with Git and GitHub\n\n### Creating an RStudio Project\n\nYou can create a new RStudio Project in several ways:\n\n1. **File menu**: Go to `File > New Project...`\n2. **Project dropdown**: Click the project dropdown in the top-right corner and select \"New Project\"\n3. **Choose New Directory**: Create a project in a new folder.\n\nWhen creating a project, you have three main options:\n\n- **New Directory**: Create a fresh project folder\n- **Existing Directory**: Turn an existing folder into a project\n- **Version Control**: Clone a repository from GitHub or other version control systems\n\n### Project Structure Best Practices\n\nA well-organized project typically follows a consistent structure (that YOU define). Here's a common structure that you might consider:\n\n```\nmy_analysis_project/\n├── my_analysis_project.Rproj\n├── data/\n│   ├── raw/\n│   └── processed/\n├── scripts/\n├── notebooks/\n├── outputs/\n│   ├── figures/\n│   └── tables/\n├── README.md\n└── .gitignore\n```\n\nThis structure separates raw data from processed data, keeps scripts organized, and provides clear locations for outputs.\n\n### Working Directories and File Paths\n\nOne of the most significant advantages of using RStudio Projects is that they solve the common problem of file path management. When you open a project, RStudio automatically sets the working directory to the project folder. This means:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instead of using absolute paths like this:\ndf <- read.csv(\"/Users/username/Documents/my_analysis/data/dataset.csv\")\n\n# You can use relative paths like this:\ndf <- read.csv(\"data/dataset.csv\")\n```\n:::\n\n\nRelative paths make your code portable—anyone who opens your project will be able to run your scripts without modifying file paths.\n\n### Projects and Reproducibility\n\nRStudio Projects can play a key (but optional) role in creating reproducible analyses. When you share a project folder (or push it to GitHub), collaborators can:\n\n1. Download/clone the entire project\n2. Open the `.Rproj` file\n3. Run your scripts without any setup or path modifications\n\nThis seamless workflow is essential for collaborative research and makes your work more credible and verifiable.\n\n\n## Saving and Loading Workspace\n\nIf you are not in Rstudio and want to save your workspace there are a few\noptions. If you choose to save your session when you quit out of R\nwith `q(\"yes\")` or `q()` and selecting `yes`, it is also equivalent to the\nfollowing using save\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(list = ls(all.names = TRUE), file =\".RData\", envir = .GlobalEnv)\n```\n:::\n\nThis saves your workspace and command history. Any object assignments and\ncommand history (viewable with `history()`) will be available in your next R\nsession. Your session will load automatically when you start up R in the same\ndirectory. \n\nYou can use the `save.image` option\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave.image()\n# or\nsave.image(file=\"descriptiveFileName.RData\")\n```\n:::\n\n\nIf you do not give `save.image` a file name, it will also load on default if you\nstart an R session in that directory but with default settings will not have\nyour command history. \n\nIf you give `save.image` a file name, it will not automatically load when you\nstart R and will not have command history. You will have to load the image\nmanually to see the objects in the new R session.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"descriptiveFileName.RData\")\n```\n:::\n\n\n## Saving and Loading Objects\n\nIf you want to selectively save objects, the `save` function is utilized. This\nallows you to choose the objects you want saved. The `load` function would then\nload the selected objects into a new R session.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nages = 1:4\nmonths = c(\"may\", \"june\", \"july\", \"august\")\nvec = c(TRUE, FALSE, TRUE)\nsave(months, ages, file=\"subset.RData\")\n```\n:::\n\n\n## Saving and Loading Command History\n\nWhen quitting out of R, if you save, it also saves your command history. To do\nthis manually you can use the `savehistory`/`loadhistory` functions in R.\n\n\nNow that we understand how to organize our work with RStudio Projects and how to\nsave and load workspaces, let's explore how to read and write the data files that will live within these organized project structures.\n",
    "supporting": [
      "rproj_and_save_load_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}