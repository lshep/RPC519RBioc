{
  "hash": "39fede2de739aee6552bd8ce57933994",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"Sean Davis\"\n---\n\n# Self-Guided Data Visualization in R\n\nData visualization is a critical skill in the data scientist's toolkit. It's the bridge between raw data and human understanding. Effective visualizations can reveal patterns, trends, and outliers that might be missed in a table of numbers. In the R programming language, the `ggplot2` package stands as the gold standard for creating beautiful, flexible, and powerful graphics.\n\nThis document will guide you through the principles of effective data visualization and show you how to apply them using `ggplot2`. We'll cover best practices, common plot types, and the \"grammar of graphics\" methodology that makes `ggplot2` so intuitive.\n\nBefore diving in, though, there are a some truly amazing online resources that showcase\nwhat can be done with R graphics and also stimulate your imagination. Two of the best are:\n\n- [The R Graph Gallery](https://r-graph-gallery.com/): A comprehensive collection of R graphics examples, covering a wide range of plot types and customization options.\n- [From Data to Viz](https://data-to-viz.com/): A guide that helps you choose the right type of visualization for your data and provides examples in R.\n\nAfter walking through this document, go back to these resources and explore the examples. You'll see how the principles we discuss here are applied in real-world scenarios, and you'll gain inspiration for your own visualizations.\n\n## Getting Started with ggplot2\n\nTo get started, we need to load the `ggplot2` package, which is part of the `tidyverse`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the necessary R packages for data visualization\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n:::\n\n \n\n## Core Principles of Effective Data Visualization\n\nBefore we start plotting, it's essential to understand what makes a visualization effective. Two key principles are maximizing the data-ink ratio and using clear labels.\n\n### The \"Least Ink\" Principle\n\nCoined by the statistician Edward Tufte, the **data-ink ratio** is the proportion of a graphic's ink devoted to the non-redundant display of data information. The goal is to maximize this ratio. In simpler terms, **every single pixel should have a reason to be there.**\n\n![Edward Tufte's landmark book, \"The Visual Display of Quantitative Information,\" emphasizes the importance of maximizing the data-ink ratio.](https://www.edwardtufte.com/wp-content/uploads/2023/09/edward-tufte-visual-display-of-quantitative-information.jpg){#fig-tufte-book}\n\nAvoid chart junk like:\n\n* Redundant grid lines\n* Unnecessary backgrounds or colors\n* 3D effects on 2D plots\n* Shadows and other decorative elements\n\nLet's look at an example. The first plot has a lot of \"chart junk,\" while the second one is cleaner and focuses on the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the built-in 'mpg' dataset\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  theme_gray() + # A theme with a lot of non-data ink\n  labs(title = \"Fuel Efficiency vs. Engine Displacement\",\n       subtitle = \"This is a very busy plot\",\n       x = \"Engine Displacement (Liters)\",\n       y = \"Highway Miles per Gallon\",\n       color = \"Vehicle Class\")\n```\n\n::: {.cell-output-display}\n![A cluttered plot with low data-ink ratio. The gray background, heavy gridlines, and legend title are all unnecessary.](visualization_guide_files/figure-pdf/fig-bad-plot-1.pdf){#fig-bad-plot fig-pos='H'}\n:::\n:::\n\n\nHere's a cleaner version of the same plot that follows the \"least ink\" principle. Notice how it removes unnecessary elements while still conveying the same information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  theme_minimal() + # A cleaner theme\n  labs(title = \"Fuel Efficiency vs. Engine Displacement\",\n       x = \"Engine Displacement (Liters)\",\n       y = \"Highway Miles per Gallon\",\n       color = \"Class\") # Simpler legend title\n```\n\n::: {.cell-output-display}\n![A clean, minimalist plot that follows the 'least ink' principle. The focus is entirely on the relationship between the data points.](visualization_guide_files/figure-pdf/fig-good-plot-1.pdf){#fig-good-plot fig-pos='H'}\n:::\n:::\n\n\nWhile this is a subjective topic, the goal is to make your plots as clear and informative as possible. The \"least ink\" principle is a guideline, not a rule, but it can help you create more effective visualizations.\n\n### The Importance of Clear Labeling\n\nA plot without labels is just a picture. To be a useful piece of analysis, it needs to communicate context. Always ensure your plots have:\n\n* A clear and descriptive title.\n* Labeled axes with units ($e.g.$, \"Temperature (Â°C)\").\n* An informative legend if you're using color, shape, or size to encode data.\n\n### Color and Contrast\n\nColor is a powerful tool in data visualization, but it can also be misused. R provides several built-in color palettes, and you can also use packages like `RColorBrewer` for more options. Think in terms of colorblind-friendly palettes, and avoid using too many colors in a single plot. \n\nColor palettes can be roughly categorized into:\n\n* Sequential palettes (first list of colors), which are suited to ordered data that progress from low to high (gradient). \n* Qualitative palettes (second list of colors), which are best suited to represent nominal or categorical data. They not imply magnitude differences between groups. \n* Diverging palettes (third list of colors), which put equal emphasis on mid-range critical values and extremes at both ends of the data range. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\n\ndisplay.brewer.all()\n```\n\n::: {.cell-output-display}\n![Examples of color palettes in R. The first row shows sequential palettes, the second row shows qualitative palettes, and the third row shows diverging palettes.](visualization_guide_files/figure-pdf/fig-color-palettes-1.pdf){#fig-color-palettes fig-pos='H'}\n:::\n:::\n\n\nIt is also important to consider colorblindness when choosing colors for your plots. The most common types of color blindness are red-green and blue-yellow. You can use tools like the `colorspace` package to check how your plots will look to people with different types of color vision deficiencies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndisplay.brewer.all(colorblindFriendly=TRUE)\n```\n\n::: {.cell-output-display}\n![A colorblind-friendly palette from the 'colorspace' package. This palette is designed to be distinguishable for people with various types of color vision deficiencies.](visualization_guide_files/figure-pdf/fig-colorblind-friendly-1.pdf){#fig-colorblind-friendly fig-pos='H'}\n:::\n:::\n\n\n\n\n\n## Introduction to ggplot2: The Grammar of Graphics\n\nRather than reproducing excellent online resources, for this section, pick any or all of the following resources to learn about the grammar of graphics and how to use `ggplot2`:\n\n- [R for Data Science: Data Visualization](https://r4ds.had.co.nz/data-visualisation.html)\n- [ggplot2 documentation](https://ggplot2.tidyverse.org/)\n- [Modern Data Visualization with R](https://rkabacoff.github.io/datavis/)\n\n## Sets and Intersections: UpSet Plots\n\nWhen dealing with multiple sets, visualizing their intersections can be challenging. Traditional Venn diagrams become cluttered and hard to read with more than three sets.\nAn **UpSet plot** is a powerful alternative for visualizing the intersections of multiple sets. It consists of two main parts: a matrix that shows which sets are part of an intersection, and a bar chart that shows the size of each intersection. This makes it far more scalable and easier to interpret than a complex Venn diagram.\n\nTo create an UpSet plot, we use the `UpSetR` package. It takes a specific input format where 0s and 1s indicate the absence or presence of an element in a set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"UpSetR\")\nlibrary(UpSetR)\nmovies <- read.csv(system.file(\"extdata\", \"movies.csv\", package = \"UpSetR\"), \n    header = T, sep = \";\")\n\n# Use the 'movies' dataset that comes with UpSetR\n# This dataset is already in the correct binary format\nupset(movies, \n      nsets = 5, # Show the 5 most frequent genres\n      order.by = \"freq\",\n      mainbar.y.label = \"Intersection Size\",\n      sets.x.label = \"Total Movies in Genre\")\n```\n\n::: {.cell-output-display}\n![An UpSet plot visualizing movie genres. The main bar chart shows the size of intersections (e.g., how many movies are both 'Comedy' and 'Romance'). The bottom-left matrix indicates which genres are part of each intersection. This is much clearer than a 5-set Venn diagram.](visualization_guide_files/figure-pdf/fig-upset-plot-1.pdf){#fig-upset-plot fig-pos='H'}\n:::\n:::\n\n\nThe UpSet plot clearly shows us, for instance, the number of movies that are exclusively \"Drama\" versus those that are a combination of \"Drama,\" \"Comedy,\" and \"Romance.\" This level of detail is difficult to achieve with a Venn diagram.\n\n## Complex Heatmaps\n\nHeatmaps are a powerful way to visualize complex data matrices, especially when dealing with large datasets. They allow you to see patterns and relationships in the data at a glance. \n\nWhat is a heatmap? It's a graphical representation of data where individual values are represented as colors. The color intensity indicates the magnitude of the value, making it easy to spot trends and outliers. The underlying data is typically a matrix of numbers.\n\n::: {.callout-note}\nA matrix is a two-dimensional array of numbers, where each element is identified by its row and column indices. Matrices can include only ONE data type.\n:::\n\nThere are many ways to create heatmaps in R including the base R `heatmap()` function, the `ggplot2` package, and specialized packages like `ComplexHeatmap`.\n\nFeel free to explore the following resources for some of the most popular heatmap packages in R:\n\n- [ggplot2 Heatmaps](https://ggplot2.tidyverse.org/reference/geom_tile.html) allows you to create basic heatmaps using the `geom_tile()` function. This is a good starting point for simple heatmaps.\n- [The heatmap() function](https://www.rdocumentation.org/packages/stats/topics/heatmap) in base R is a simple way to create heatmaps. It automatically scales the data and provides options for clustering rows and columns.\n- [The pheatmamp package](https://biostatsquid.com/step-by-step-heatmap-tutorial-with-pheatmap/) is a popular package for creating heatmaps with more customization options. It allows you to add annotations, customize colors, and control clustering.\n- [Complex Heatmaps](https://jokergoo.github.io/ComplexHeatmap-reference/book/) is a powerful R package for creating complex heatmaps. It allows you to visualize data matrices with multiple annotations, making it ideal for genomic data analysis.\n- [Interactive Complex Heatmaps](https://bioconductor.org/packages/release/bioc/html/InteractiveComplexHeatmap.html) is an extension of the Complex Heatmaps package that allows you to create interactive heatmaps. This can be useful for exploring large datasets and identifying patterns.\n\n## Genome and Genomic Data Visualization\n\n\nThe [`Gviz` package](https://www.bioconductor.org/packages/Gviz/) is a powerful tool for visualizing genomic data in R. It allows you to create publication-quality plots of genomic features, such as gene annotations, sequence alignments, and expression data.\n\nThe [GenomicDistributions package](https://www.bioconductor.org/packages/GenomicDistributions/) is another useful package for visualizing genomic data. It provides functions for creating distribution plots of genomic features, such as coverage, chip-seq or atac-seq distributions relative to genomic features, etc. \n\n## Conclusion\n\nThis document has provided a comprehensive foundation for creating effective data visualizations in R with `ggplot2`. We've covered the core principles of good design, explored a wide range of common plot types including heatmaps, and seen how `ggplot2`'s layered grammar allows for the creation of complex, insightful graphics by mapping multiple data dimensions to aesthetics. We also discussed why certain plots like Venn diagrams can be problematic and introduced powerful alternatives like UpSet plots.\n\nThe key to mastering data visualization is practice. Experiment with different datasets, try new `geoms`, and always think critically about the story your plot is telling and the best way to tell it.\n\n",
    "supporting": [
      "visualization_guide_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}