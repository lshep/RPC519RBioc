{
  "hash": "acfd283c68b2cd99b700e3b16018941f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reading and writing data files\"\n---\n\n## Introduction\n\nIn this chapter, we will discuss how to read and write data files in R. Data files are essential for storing and sharing data across different platforms and applications. R provides a variety of functions and packages to read and write data files in different formats, such as text files, CSV files, Excel files. By mastering these functions, you can efficiently import and export data in R, enabling you to perform data analysis and visualization tasks effectively.\n\n## CSV files\n\nComma-Separated Values (CSV) files are a common file format for storing tabular data. They consist of rows and columns, with each row representing a record and each column representing a variable or attribute. CSV files are widely used for data storage and exchange due to their simplicity and compatibility with various software applications. In R, you can read and write CSV files using the `read.csv()` and `write.csv()` functions, respectively. A commonly used alternative is to use the `readr` package, which provides faster and more user-friendly functions for reading and writing CSV files.\n\n### Writing a CSV file\n\nSince we are going to use the `readr` package, we need to install it first. You can install the `readr` package using the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"readr\")\n```\n:::\n\n\nOnce the package is installed, you can load it into your R session using the `library()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n```\n:::\n\n\nSince we don't have a CSV file sitting around, let's create a simple data frame to write to a CSV file. Here's an example data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  id = c(1, 2, 3, 4, 5),\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"),\n  age = c(25, 30, 35, 40, 45)\n)\n```\n:::\n\n\nNow, you can write this data frame to a CSV file using the `write_csv()` function from the `readr` package. Here's how you can do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(df, \"data.csv\")\n```\n:::\n\n\nYou can check the current working directory to see if the CSV file was created successfully. If you want to specify a different directory or file path, you can provide the full path in the `write_csv()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# see what the current working directory is\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/home/lorikern/Projects/Papers_Reporting_Conferences/RBiocBook-book/RPC519RBioc\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# and check to see that the file was created\ndir(pattern = \"data.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.csv\"\n```\n\n\n:::\n:::\n\n\n### Reading a CSV file\n\nNow that we have a CSV file, let's read it back into R using the `read_csv()` function from the `readr` package. Here's how you can do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- read_csv(\"data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 5 Columns: 3\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (1): name\ndbl (2): id, age\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nYou can check the structure of the data frame `df2` to verify that the data was read correctly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 3\n     id name      age\n  <dbl> <chr>   <dbl>\n1     1 Alice      25\n2     2 Bob        30\n3     3 Charlie    35\n4     4 David      40\n5     5 Eve        45\n```\n\n\n:::\n:::\n\n\nThe `readr` package can read CSV files with various delimiters, headers, and data types, making it a versatile tool for handling tabular data in R. It can also read CSV files directly from web locations like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- read_csv(\"https://data.cdc.gov/resource/pwn4-m3yp.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1000 Columns: 10\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (1): state\ndbl  (6): tot_cases, new_cases, tot_deaths, new_deaths, new_historic_cases, ...\ndttm (3): date_updated, start_date, end_date\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nThe dataset that you just downloaded is described here: [Covid-19 data from CDC](https://data.cdc.gov/Case-Surveillance/Weekly-United-States-COVID-19-Cases-and-Deaths-by-/pwn4-m3yp/about_data)\n\n## Excel files\n\nMicrosoft Excel files are another common file format for storing tabular data. Excel files can contain multiple sheets, formulas, and formatting options, making them a popular choice for data storage and analysis. In R, you can read and write Excel files using the `readxl` package. This package provides functions to import and export data from Excel files, enabling you to work with Excel data in R.\n\n### Reading an Excel file\n\nTo read an Excel file in R, you need to install and load the `readxl` package. You can install the `readxl` package using the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"readxl\")\n```\n:::\n\n\nOnce the package is installed, you can load it into your R session using the `library()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n:::\n\n\nNow, you can read an Excel file using the `read_excel()` function from the `readxl` package. We don't have an excel file available, so let's download one from the internet. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file('https://www.w3resource.com/python-exercises/pandas/excel/SaleData.xlsx', 'SaleData.xlsx')\n```\n:::\n\n\nNow, you can read the Excel file into R using the `read_excel()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_excel <- read_excel(\"SaleData.xlsx\")\n```\n:::\n\n\nYou can check the structure of the data frame `df_excel` to verify that the data was read correctly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_excel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 45 x 8\n   OrderDate           Region  Manager SalesMan  Item  Units Unit_price Sale_amt\n   <dttm>              <chr>   <chr>   <chr>     <chr> <dbl>      <dbl>    <dbl>\n 1 2018-01-06 00:00:00 East    Martha  Alexander Tele~    95       1198   113810\n 2 2018-01-23 00:00:00 Central Hermann Shelli    Home~    50        500    25000\n 3 2018-02-09 00:00:00 Central Hermann Luis      Tele~    36       1198    43128\n 4 2018-02-26 00:00:00 Central Timothy David     Cell~    27        225     6075\n 5 2018-03-15 00:00:00 West    Timothy Stephen   Tele~    56       1198    67088\n 6 2018-04-01 00:00:00 East    Martha  Alexander Home~    60        500    30000\n 7 2018-04-18 00:00:00 Central Martha  Steven    Tele~    75       1198    89850\n 8 2018-05-05 00:00:00 Central Hermann Luis      Tele~    90       1198   107820\n 9 2018-05-22 00:00:00 West    Douglas Michael   Tele~    32       1198    38336\n10 2018-06-08 00:00:00 East    Martha  Alexander Home~    60        500    30000\n# i 35 more rows\n```\n\n\n:::\n:::\n\n\nThe `readxl` package provides various options to read Excel files with multiple sheets, specific ranges, and data types, making it a versatile tool for handling Excel data in R.\n\n### Writing an Excel file\n\nTo write an Excel file in R, you can use the `write_xlsx()` function from the `writexl` package. You can install the `writexl` package using the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"writexl\")\n```\n:::\n\n\nOnce the package is installed, you can load it into your R session using the `library()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(writexl)\n```\n:::\n\n\nThe `write_xlsx()` function allows you to write a data frame to an Excel file. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_xlsx(df, \"data.xlsx\")\n```\n:::\n\n\nYou can check the current working directory to see if the Excel file was created successfully. If you want to specify a different directory or file path, you can provide the full path in the `write_xlsx()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# see what the current working directory is\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/home/lorikern/Projects/Papers_Reporting_Conferences/RBiocBook-book/RPC519RBioc\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# and check to see that the file was created\ndir(pattern = \"data.xlsx\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.xlsx\"\n```\n\n\n:::\n:::\n\n\n## Additional options\n\n- Google Sheets: You can read and write data from Google Sheets using the `googlesheets4` package. This package provides functions to interact with Google Sheets, enabling you to import and export data from Google Sheets to R.\n- JSON files: You can read and write JSON files using the `jsonlite` package. This package provides functions to convert R objects to JSON format and vice versa, enabling you to work with JSON data in R.\n- Database files: You can read and write data from database files using the `DBI` and `RSQLite` packages. These packages provide functions to interact with various database systems, enabling you to import and export data from databases to R.\n\n\n",
    "supporting": [
      "reading_and_writing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}