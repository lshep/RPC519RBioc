# R mechanics

```{r style, echo = FALSE, results = 'asis'}
knitr::opts_chunk$set(
    eval=as.logical(Sys.getenv("KNITR_EVAL", "TRUE")),
    cache=as.logical(Sys.getenv("KNITR_CACHE", "TRUE")))
```


## Starting R

We've installed R and RStudio. Now, let's start R and get going. 
How to start R depends a bit on the operating system (Mac, Windows,
Linux) and interface.  In this course, we will largely be using an
Integrated Development Environment (IDE) called *RStudio*, but there
is nothing to prohibit using R at the command line or in some other
interface (and there are a few).

## _RStudio_: A Quick Tour


The RStudio interface has multiple panes. All of these panes are
simply for convenience except the "Console" panel, typically in the
lower left corner (by default). The console pane contains the running R
interface. If you choose to run R outside RStudio, the interaction
will be *identical* to working in the console pane. This is useful to
keep in mind as some environments, such as a computer cluster,
encourage using R without RStudio.

- Panes
- Options
- Help
- Environment, History, and Files


## Interacting with R


The only meaningful way of interacting with R is by typing into the R console. At the most basic level, anything that we type at the command line will fall into one of two categories:

1.  Assignments
    
    ```{r}
    x = 1
    y <- 2
    ```
    
2.  Expressions

    ```{r}
    1 + pi + sin(42)
    ```

The assignment type is obvious because either the The `<-` or `=` are used. Note that when we type expressions, R will return a result.  In this case, the result of R evaluating `1 + pi + sin(42)` is `r 1 + pi + sin(42)`.

The standard R prompt is a ">" sign. When present, R is waiting for the next expression or assignment.  If a line is not a complete R command, R will continue the next line with a "+". For example, typing the following with a "Return" after the second "+" will result in R giving back a "+" on the next line, a prompt to keep typing.

```{r tidy=FALSE}
1 + pi +
sin(3.7)
```

R can be used as a glorified calculator by using R expressions. Mathematical operations include:

- Addition: `+`
- Subtraction: `-`
- Multiplication: `*`
- Division: `/`
- Exponentiation: `^`
- Modulo: `%%`

The `^` operator raises the number to its left to the power of the number to its right: for example `3^2` is `9`.
The modulo returns the remainder of the division of the number to the left by the number on its right, for example 5 modulo 3 or `5 %% 3` is 2.

### Expressions

```{r calculator10, eval=FALSE}
5 + 2
28 %% 3
3^2
5 + 4 * 4 + 4 ^ 4 / 10
```

Note that R follows order-of-operations and groupings based on parentheses.

```{r calculator20, eval=FALSE}
5 + 4 / 9
(5 + 4) / 9
```

### Assignment

While using R as a calculator is interesting, to do useful and interesting things, we need to assign _values_ to _objects_. To create objects, we need to give it a name followed by the assignment operator `<-` (or, entirely equivalently, `=`) and the value we want to give it:

```{r assignment}
weight_kg <- 55 
```

`<-` is the assignment operator. Assigns values on the right to objects on the left, it is like an arrow that points from the value to the object. Using an `=` is equivalent (in nearly all cases). Learn to use `<-` as it is good programming practice. 

::: {.callout-note}
## What about `<-` and `=` for assignment?

The `<-` and `=` both work fine for assignment.
You'll see both used and it is up to you to choose a standard for yourself.
However, some programming communities, such as Bioconductor, will strongly suggest using the `<-` as it is clearer that it represents an _assignment_ operation. 
::: 

Objects can be given any name such as `x`, `current_temperature`, or `subject_id` (see below). You want your object names to be explicit and not too long. They cannot start with a number (`2x` is not valid but `x2` is). R is case sensitive (e.g., `weight_kg` is different from `Weight_kg`). There are some names that cannot be used because they represent the names of fundamental functions in R (e.g., `if`, `else`, `for`, see [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html) for a complete list). In general, even if it's allowed, it's best to not use other function names, which we'll get into shortly (e.g., `c`, `T`, `mean`, `data`, `df`, `weights`). When in doubt, check the help to see if the name is already in use. It's also best to avoid dots (`.`) within a variable name as in `my.dataset`. It is also recommended to use nouns for variable names, and verbs for function names.

When assigning a value to an object, R does not print anything. You can force to print the value by typing the name:

```{r printAssignment}
weight_kg
```

Now that R has `weight_kg` in memory, which R refers to as the "global environment", we can do arithmetic with it. For instance, we may want to convert this weight in pounds (weight in pounds is 2.2 times the weight in kg).

```{r modAssignment}
2.2 * weight_kg
```

We can also change a variable's value by assigning it a new one:

```{r newAssignment}
weight_kg <- 57.5
2.2 * weight_kg
```

This means that assigning a value to one variable does not change the values of other variables. For example, let's store the animal's weight in pounds in a variable.

```{r calculationWithVar}
weight_lb <- 2.2 * weight_kg
```

and then change `weight_kg` to 100.

```{r modAssignment2}
weight_kg <- 100
```

What do you think is the current content of the object `weight_lb`, 126.5 or 220?

You can see what objects (variables) are stored by viewing the Environment tab in Rstudio. You can also use the `ls()` function. You can remove objects (variables) with the `rm()` function. You can do this one at a time or remove several objects at once. You can also use the little broom button in your environment pane to remove everything from your environment.

```{r rm, eval=FALSE}
ls()
rm(weight_lb, weight_kg)
ls()
```

What happens when you type the following, now?

```{r errorAfterrm, eval=FALSE}
weight_lb # oops! you should get an error because weight_lb no longer exists!
```

## Rules for Names in R

R allows users to assign names to objects such as variables, functions, and even dimensions of data. However, these names must follow a few rules.

- Names may contain any combination of letters, numbers, underscore, and "."
- Names may not start with numbers, underscore.
- R names are case-sensitive.

Examples of valid R names include:

```
pi
x
camelCaps
my_stuff
MY_Stuff
this.is.the.name.of.the.man
ABC123
abc1234asdf
.hi
```

## About R functions

When you see a name followed by parentheses `()`, you are likely looking a name that represents an R function (or method, but we'll sidestep that distinction for now). 
Examples of R functions include `print()`, `help()`, and `ls()`. 
We haven't seen examples yet, but when a name is followed by `[]`, that name represents a variable of some kind and the `[]` are used for "subsetting" the variable. So:

* Name followed by `()` is a function.
* Name with `[]` means a variable that is being subset. 

In many cases, when you see a new function used, you may not know what it does.
The R `help()` function takes the name of another function and gives back the R help document for that function if there is one. The next section reviews that technique. 

## Resources for Getting Help

There is extensive built-in help and documentation within R. A separate page contains a collection of  [additional resources](additional_resources.html).

If the name of the function or object on which help is sought is known, the following approaches with the name of the function or object will be helpful. For a concrete example, examine the help for the `print` method.

```{r eval=FALSE}
help(print)
help('print')
?print
```


There are also tons of online resources that Google will include in searches if online searching feels more appropriate.

I strongly recommend using `help("newfunction")` for all
functions that are new or unfamiliar to you.

There are also many open and free resources and reference
guides for R.

* [Quick-R](http://www.statmethods.net/): a quick online reference for data input, basic statistics and plots
* R reference card [PDF](https://cran.r-project.org/doc/contrib/Short-refcard.pdf) by Tom Short
* Rstudio [cheatsheets](https://www.rstudio.com/resources/cheatsheets/)

## Reflection

* Can you recognize the difference between _assignment_ and _expressions_ when interacting with R?
* Can you demonstrate an assignment to a variable?
* Do you know the rules for "names" in R?
* Are you able to get help using the R `help()` function?
* Do you know that functions are recognizable as names followed by `()`?
