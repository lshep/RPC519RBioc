# Control Statements

Control statements help determine the flow and execution of commands based on
conditional statements. This chapter will cover a brief overview of the
following:

- Conditional Statements
  * if
  * if-else
  * ifelse

- Loops
  * for
  * while
  * repeat-break

- Special
  * return
  * next

- Other
  * try / tryCatch
  * nested 

## Conditional Statements

### if 

Let's start with an `if` statement. An if statement evaluates an expression and
depending on its result performs a sub-section of select code.

**Syntax:**

```{r, eval=FALSE}
if (expression){
  # additional code to run if expression is TRUE
  ...
}
```
The expression contained in parenthesis will result in a boolean (TRUE/FALSE)
value used to determine if the code in the braces should be executed. 

**Example:**

```{r}
x <- 12
if (x > 0){
  message(x, " is greater than 0")
  x <- 0
}
x
```

::: {.callout-tip}
Notice all lines in the braces are executed including a assignment that changes
our original value
:::

### if-else

An `if-else` statement adds additional code to be executed if the expression is
FALSE.

**Syntax:**

```{r, eval=FALSE}
if (expression){
  # additional code to run if expression is TRUE
  ...
} else {
  # additional code to run if expression if FALSE
  ...
}
```
We could read this allowed as if the expression is true execute this code else
if the expression is false execute this other code.

**Example:**

```{r}
if (x > 0){
  message(x, " is greater than 0")
  x <- 0
} else {
  message(x, " is not greater than 0")
  x <- x + 2
}
```

What is x now?

::: {.callout-important}
Pay attention to syntax. It is important to include all parenthesis and
brackets. In general if you have an open parenthesis or bracket, you will need a
closed parenthesis or bracket.
:::

### ifelse

A specialized if-else statement is the `ifelse`. It is a simplified version
where an object can be coerced into logical form and return values for
true/false.

**Syntax:**

```{r, eval=FALSE}
ifelse(test_expression, yes_value, no_value)
```

**Example**

```{r}
num_vec <- -3:3
ifelse(num_vec >= 0, "positive", "negative")
```

## Loops

Loops are control statements that allow for repeated code execution either for a
set number of times, over a certain set of elements, or until a conditional
statement is met.

### for

A `for` loop will execute commands over a certain set of elements.

**Syntax:**

```{r, eval=FALSE}
for(value in vector){
  ## code to execute for each item in vector
  ...
}
```
value can be utilized in the executed code.

**Examples**

In this example, the vector of names is looped over, printing the number of
characters in each name.

```{r}
names <- c("Donna", "John", "Bradley", "Kara")
for(nm in names){
  print(paste(nm, "has", nchar(nm), "letters"))
}
```
In this example, for each value 1 to 5 (1,2,3,4,5), we take that value and add
to the current value of x. Notice how this updates x each time.

```{r}
x <- 0
for(i in 1:5){
  print(paste("add", i, "to", x))
  x <- x + i
}
```
In this example, we loop over the elements of a list. For each list element we
get the name of the item in the list and how many items that list element contains.

```{r}
my_list <- list(people=names,
                ages=c(54, 78, 40, 5, 25),
		animals=c("dog", "fish"))
for(i in seq_along(my_list)){
  list_element <- my_list[[i]]
  print(paste("List element", names(my_list)[i], "contains",
  length(my_list[[i]]), "values"))
}
```
### while

A `while` loop will execute until an expression is met.

**Syntax:**

```{r, eval=FALSE}
while(expression){
  ## code to execute until the expression is met
  ## be sure to update variable used in expression
  ...
}
```

**Example**
```{r}
value <- 1
while (value <= 5){
  print(value)
  value = value + 1
}
```
::: {.callout-important}
Notice how we have to update the value that is being checked each time and that
it is logical that it should eventually reach a point where the loop exists. Be
cautious of **infinite loops**. These occur when the loop will never reach a
stopping point because the expression will never be FALSE
:::

### repeat

`repeat` is a indefinite loop. A `break` statement must be used to terminate the
loop.

**Syntax:**

```{r, eval=FALSE}
repeat{
  ## code to be evaluated
  if (condition){
    break
  }
}	
```
In this example we will repeat ourself until the breaking conditions reaches the
number of times we set to repeat. Notice how the code inside the loop alters the
variable used in the conditional statement. 

**Example**
```{r}
i <- 0
times <- 3
repeat{
  print("I am repeating myself")
  i <- i + 1
  if (i == times){
    break
  }
}
```

## Other

### try / tryCatch

### nesting